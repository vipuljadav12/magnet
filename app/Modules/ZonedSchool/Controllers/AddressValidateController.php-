<?php

namespace App\Modules\ZonedSchool\Controllers;

use Illuminate\Http\Request;
use App\Modules\ZonedSchool\Models\ZonedSchool;
use App\Modules\ZonedSchool\Models\ZonedAddressMaster;
use App\Modules\ZonedSchool\Export\ZoneAddressExport;
use App\Modules\ZonedSchool\Export\ZonedSchoolImport;
use App\Modules\ZonedSchool\Models\NoZonedSchool;
use App\Http\Controllers\Controller;
use Maatwebsite\Excel\Facades\Excel;
use Validator;
use Session;
use DB;
use Auth;
// use Illuminate\Support\Facades\DB;

class AddressValidateController extends Controller
{

    private $end_points = [
        'schools' => "https://maps.huntsvilleal.gov/ArcGIS/rest/services/Layers/Addresses/MapServer/1/query?returnCountOnly=false&returnIdsOnly=false&returnGeometry=false&outFields=elem_sch_distr%2Cmid_sch_distr%2Chigh_sch_distr%2Caddress_full&f=json&where=address_full+LIKE+",
        'possible_addresses' => "https://maps.huntsvilleal.gov/arcgis/rest/services/Locators/CompositeLocator/GeocodeServer/findAddressCandidates?Street=&category=&outFields=*&maxLocations=5&outSR=&searchExtent=&location=&distance=&magicKey=&f=json&SingleLine=",
    ];

    public function __construct(){
        // session()->put('district_id', 1);  //26-6-20
    }

    public function prepareAddress( $address ){
        //HSV City System only used Unit, it changes Apt and Suite over to Unit.
        //We need to do the same. PREG_REPLACE Replaces either words with Unit.
        $address = trim( $address );
        $address = preg_replace( '/(\bSuite\b)|(\bLot\b)|(\bApt\b)/i' , 'Unit' , $address );
        $address = preg_replace( "/(\.)|(,)|(')|(#)/" , '' , $address );
        $address = preg_replace( '/(\bDrive\b)/i' , 'DR' , $address );
        $address = preg_replace( '/(\bCr\b)/i' , 'CIR' , $address );
        //$address = preg_replace( '/(\bmc)/i' , 'Mc ' , $address );
        $address = preg_replace( '/(\bBlvd\b)/i' , 'BLV' , $address );
        $address = preg_replace( '/(\bAvenue\b)/i' , 'AVE' , $address );
        $addressArray = explode( ' ' , $address );

        //Does the index:1 contain an number street. Example: 8th Street.
        if( isset( $addressArray[1] ) && preg_match( '/\d+/' , $addressArray[1] , $matches ) !== false ) {
            //Index:1 contains an number. Need to replace.
            //Add in switch statement to handle converting 1st - 17th to First - Seventeenth
            switch( strtoupper( $addressArray [1] ) ) {
                case '1ST':
                    $addressArray[1] = 'FIRST';
                    break;
                case '2ND':
                    $addressArray[1] = 'SECOND';
                    break;
                case '3RD':
                    $addressArray[1] = 'THIRD';
                    break;
                case '4TH':
                    $addressArray[1] = 'FOURTH';
                    break;
                case '5TH':
                    $addressArray[1] = 'FIFTH';
                    break;
                case '6TH':
                    $addressArray[1] = 'SIXTH';
                    break;
                case '7TH':
                    $addressArray[1] = 'SEVENTH';
                    break;
                case '8TH':
                    $addressArray[1] = 'EIGHTH';
                    break;
                case '9TH':
                    $addressArray[1] = 'NINTH';
                    break;
                case '10TH':
                    $addressArray[1] = 'TENTH';
                    break;
                case '11TH':
                    $addressArray[1] = 'ELEVENTH';
                    break;
                case '12TH':
                    $addressArray[1] = 'TWELFTH';
                    break;
                case '13TH':
                    $addressArray[1] = 'THIRTEENTH';
                    break;
                case '14TH':
                    $addressArray[1] = 'FOURTEENTH';
                    break;
                case '15TH':
                    $addressArray[1] = 'FIFTEENTH';
                    break;
                case '17TH':
                    $addressArray[1] = 'SEVENTEENTH';
                    break;
                default:
                    break;
            }
        }
        return implode( ' ' , $addressArray );
    }

    public function getSuggestion(Request $request)
    {
        //return "NoMatch";
        $val = $request->address;
        $zip_code = $request->zip;
        $address = str_ireplace('Huntsville, AL', '', $val);
        $address = str_ireplace('Northport, AL', '', $address);
        $address = str_ireplace('Cottondale, AL', '', $address);
        $address_basic = trim($address);
        $abbrevs = [
            '/ GDNS\b/i' => ' Gardens',
            '/ HTS\b/i' => ' heights',
            '/ SQ\b/i' => ' square',
            '/ VLG\b/i' => ' village',
            '/ GRV\b/i' => ' grove',
            '/ RDG\b/i' => ' ridge',
            '/ HWY\b/i' => ' hw',
            '/ HLS\b/i' => ' hills',
            '/ TER\b/i' => ' terrace'
        ];

        foreach($abbrevs as $k => $v)
        {
            $address_basic = preg_replace($k, $v, $address_basic);
        }

        $address_basic = strtoupper($address_basic);
        
        $pattern = '/ apt [a-z0-9 ]+/i';
        $pattern2 = '/ lot [a-z0-9 ]+/i';
        $address_basic = preg_replace($pattern, '', $address_basic);
        $address_basic = preg_replace($pattern2, '', $address_basic);
        $address_basic = str_replace(' ', '+', $address_basic);
        $address_basic = preg_replace('/\s+/', ' ', $address_basic);
        $address_basic = preg_replace( '/^(\d+)[a-zA-Z]/', '$1', $address_basic );

        $fake_address = $address_basic.' | '.$zip_code;

        if ($address_basic)
        {
            $url =  $this->end_points['possible_addresses']."?Street=&category=&outFields=*&maxLocations=5&outSR=&searchExtent=&location=&distance=&magicKey=&f=json&SingleLine=".$address_basic;

            $content = file_get_contents($url);
            $json = json_decode($content, true);
            echo "<pre>";
            print_r($json);exit;
            if( count( $json['candidates'] ) == 0 ){

                $address_basic = preg_replace('/\+\w+$/', '', $address_basic);

                $url = $this->end_points['possible_addresses']."?Street=&category=&outFields=*&maxLocations=5&outSR=&searchExtent=&location=&distance=&magicKey=&f=json&SingleLine="
                            .$address_basic;

                $content = file_get_contents($url);
                $json2 = json_decode($content, true);
                $json = $json2;
           }
            if( count( $json['candidates'] ) == 1 ){

                return $json['candidates'][0]['address'];
            } 
            else if( count( $json['candidates'] ) > 1)
            {
                $data = $json['candidates'];
                $address = [];
                $final_address = "";
                foreach($data as $key=>$value)
                {
                    if($value['score'] == 100)
                    {
                        $final_address = $value['address'];
                    }
                    if(!in_array($value['address'], $address))
                    {
                        $address[] = $value['address'];
                    }
                }
                $str = "<select onchange='selectAddress(this.value)' class='form-control' id='addoptions'>";
                $str .= "<option value=''>Select any address</option>";
                foreach($address as $value)
                {
                    $str .= "<option value='".$value."'>".$value."</option>";
                }
                $str .= "</select>";
                return $str;
            }       
        }
        return "NoMatch";
    }


    public function getSuggestionCurrent($form_id)
    {
        return "NoMatch";
        if(Session::has("form_data"))
        {
            $dataArray =  Session::get("form_data")[0];
        }
        $formdata = $dataArray['formdata'];

        $address_id = fetch_student_field_id($form_id, "address");
        $zip_id = fetch_student_field_id($form_id, "zip");
        $next_grade_id = fetch_student_field_id($form_id, "next_grade");

        $val = Session::get("form_data")[0]["formdata"][$address_id];
        $zip_code = Session::get("form_data")[0]["formdata"][$zip_id];
        $next_grade = Session::get("form_data")[0]["formdata"][$next_grade_id];
        $address = str_ireplace('Huntsville, AL', '', $val);
        $address = str_ireplace('Northport, AL', '', $address);
        $address = str_ireplace('Cottondale, AL', '', $address);
        $address_basic = trim($address);
        $abbrevs = [
            '/ GDNS\b/i' => ' Gardens',
            '/ HTS\b/i' => ' heights',
            '/ SQ\b/i' => ' square',
            '/ VLG\b/i' => ' village',
            '/ GRV\b/i' => ' grove',
            '/ RDG\b/i' => ' ridge',
            '/ HWY\b/i' => ' hw',
            '/ HLS\b/i' => ' hills',
            '/ TER\b/i' => ' terrace'
        ];

        foreach($abbrevs as $k => $v)
        {
            $address_basic = preg_replace($k, $v, $address_basic);
        }

        $address_basic = strtoupper($address_basic);
        
        $pattern = '/ apt [a-z0-9 ]+/i';
        $pattern2 = '/ lot [a-z0-9 ]+/i';
        $address_basic = preg_replace($pattern, '', $address_basic);
        $address_basic = preg_replace($pattern2, '', $address_basic);
        $address_basic = str_replace(' ', '+', $address_basic);
        $address_basic = preg_replace('/\s+/', ' ', $address_basic);
        $address_basic = preg_replace( '/^(\d+)[a-zA-Z]/', '$1', $address_basic );

        $fake_address = $address_basic.' | '.$zip_code;

        if ($address_basic)
        {
            $url =  $this->end_points['possible_addresses']."?Street=&category=&outFields=*&maxLocations=5&outSR=&searchExtent=&location=&distance=&magicKey=&f=json&SingleLine=".$address_basic;

            $content = file_get_contents($url);
            $json = json_decode($content, true);
            if( count( $json['candidates'] ) == 0 ){

                $address_basic = preg_replace('/\+\w+$/', '', $address_basic);

                $url = $this->end_points['possible_addresses']."?Street=&category=&outFields=*&maxLocations=5&outSR=&searchExtent=&location=&distance=&magicKey=&f=json&SingleLine="
                            .$address_basic;

                $content = file_get_contents($url);
                $json2 = json_decode($content, true);
                $json = $json2;
           }
            if( count( $json['candidates'] ) == 1 ){
                /* Here we need to add code to find out zoned school and save in session with help of next grade in session */
                $final_address = $json['candidates'][0]['address'];
            } 
            else if( count( $json['candidates'] ) > 1)
            {
                $data = $json['candidates'];
                $address = [];
                $final_address = "";
                foreach($data as $key=>$value)
                {
                    if($value['score'] == 100)
                    {
                        $final_address = $value['address'];
                    }
                }
            }       
            $zoned_school = app('App\Modules\ZonedSchool\Controllers\AddressValidateController')->getZonedSchool($final_address, $next_grade);
            if($zoned_school != '')
            {
                $formdata[$zoned_field_id] = $zoned_school;
                Session::forget("form_data");
                $dataArray['formdata'] = $formdata;
                Session::push("form_data", $dataArray);
            }
            else
            {
            	$nz = NoZonedSchool::create($insert);
                return false;
            }
            return $final_address;

        }
        return "NoMatch";
    }
    
    public function getZonedSchool($address1, $nextGrade)
	{
        echo $address1;exit;
		$updatedData = [];
		$val = $address1;
		$address = str_ireplace('Huntsville, AL', '', $val);
		$address = str_ireplace('Northport, AL', '', $address);
		$address = str_ireplace('Cottondale, AL', '', $address);
		$address_basic = trim($address);
		$abbrevs = [
			'/ GDNS\b/i' => ' Gardens',
			'/ HTS\b/i' => ' heights',
			'/ SQ\b/i' => ' square',
			'/ VLG\b/i' => ' village',
			'/ GRV\b/i' => ' grove',
			'/ RDG\b/i' => ' ridge',
			'/ HWY\b/i' => ' hw',
			'/ HLS\b/i' => ' hills',
			'/ TER\b/i' => ' terrace'
		];

		foreach($abbrevs as $k => $v)
		{
			$address_basic = preg_replace($k, $v, $address_basic);
		}

		$address_basic = strtoupper($address_basic);
		
		$pattern = '/ apt [a-z0-9 ]+/i';
		$pattern2 = '/ lot [a-z0-9 ]+/i';
		$address_basic = preg_replace($pattern, '', $address_basic);
		$address_basic = preg_replace($pattern2, '', $address_basic);
		$address_basic = str_replace(' ', '+', $address_basic);
		$address_basic = preg_replace('/\s+/', ' ', $address_basic);
		$address_basic = preg_replace( '/^(\d+)[a-zA-Z]/', '$1', $address_basic );

		if ($address_basic)
		{
			$url =  "https://maps.huntsvilleal.gov/arcgis/rest/services/Locators/CompositeLocator/GeocodeServer/findAddressCandidates?Street=&category=&outFields=*&maxLocations=5&outSR=&searchExtent=&location=&distance=&magicKey=&f=json&SingleLine=".$address_basic;
			$content = file_get_contents($url);
			$json = json_decode($content, true);

			if( count( $json['candidates'] ) == 0 ){

						$address_basic = preg_replace('/\+\w+$/', '', $address_basic );
						$url = "https://maps.huntsvilleal.gov/arcgis/rest/services/Locators/CompositeLocator/GeocodeServer/findAddressCandidates?Street=&category=&outFields=*&maxLocations=5&outSR=&searchExtent=&location=&distance=&magicKey=&f=json&SingleLine="
	            			.$address_basic;

				 	   	$content = file_get_contents($url);
				 	   	$json2 = json_decode($content, true);

					 	if( count( $json2['candidates'] ) == 1 ){
					 		$json = $json2;
					 	} else if( count( $json2['candidates'] ) > 1 ){
					 		$data = $json2['candidates'];
					 		$address = [];
					 		$final_address = "";
					 		foreach($data as $key=>$value)
					 		{
					 			if($value['score'] == 100)
					 			{
					 				$final_address = $value['address'];
					 			}
					 			if(!in_array($value['address'], $address))
					 			{
					 				$address[] = $value['address'];
					 			}
					 		}
					 		if($final_address != "")
					 		{
					 			return $final_address;
					 			$url = "https://maps.huntsvilleal.gov/ArcGIS/rest/services/Layers/Addresses/MapServer/1/query?returnCountOnly=false&returnIdsOnly=false&returnGeometry=false&outFields=elem_sch_distr%2Cmid_sch_distr%2Chigh_sch_distr%2Caddress_full&f=json&where=address_full="
				        	.urlencode( "'".$json['candidates'][0]['address']."'" );
				        		$content = file_get_contents($url);
						$json = json_decode($content, true);



						$updatedData[12] = ( $json['features'][0]['attributes']['elem_sch_distr'] )
							? ucwords( strtolower($json['features'][0]['attributes']['elem_sch_distr']) )
							: 'N/A';
						$updatedData[13] = ( $json['features'][0]['attributes']['ES_choice'] )
							? ucwords( strtolower($json['features'][0]['attributes']['ES_choice']) )
							: '';

						$updatedData[14] = ($json['features'][0]['attributes']['mid_sch_distr'])
							? ucwords(strtolower($json['features'][0]['attributes']['mid_sch_distr']))
							: 'N/A';

						$updatedData[15] = ( $json['features'][0]['attributes']['MS_choice'] )
							? ucwords( strtolower($json['features'][0]['attributes']['MS_choice']) )
							: '';

						$updatedData[16] = ($json['features'][0]['attributes']['high_sch_distr'])
							? ucwords(strtolower($json['features'][0]['attributes']['high_sch_distr']))
							: 'N/A';
						$updatedData[17] = ( $json['features'][0]['attributes']['HS_choice'] )
							? ucwords( strtolower($json['features'][0]['attributes']['HS_choice']) )
							: '';
					 		}
					 	}
					}

					if( isset( $json['candidates'][0]['location']['x'] ) ){

						// $geometry = '{"x" : '. $json['candidates'][0]['location']['x']
				  //           .', "y" : '.$json['candidates'][0]['location']['y']
				  //           .', "spatialReference" : {"wkid" : '.$json['spatialReference']['wkid'].'}}';

						$url = "https://maps.huntsvilleal.gov/ArcGIS/rest/services/Layers/Addresses/MapServer/1/query?returnCountOnly=false&returnIdsOnly=false&returnGeometry=false&outFields=elem_sch_distr%2Cmid_sch_distr%2Chigh_sch_distr%2Caddress_full&f=json&where=address_full="
				        	.urlencode( "'".$json['candidates'][0]['address']."'" );

						$content = file_get_contents($url);
						$json = json_decode($content, true);



						$updatedData[12] = ( $json['features'][0]['attributes']['elem_sch_distr'] )
							? ucwords( strtolower($json['features'][0]['attributes']['elem_sch_distr']) )
							: 'N/A';
						$updatedData[13] = ( $json['features'][0]['attributes']['ES_choice'] )
							? ucwords( strtolower($json['features'][0]['attributes']['ES_choice']) )
							: '';

						$updatedData[14] = ($json['features'][0]['attributes']['mid_sch_distr'])
							? ucwords(strtolower($json['features'][0]['attributes']['mid_sch_distr']))
							: 'N/A';

						$updatedData[15] = ( $json['features'][0]['attributes']['MS_choice'] )
							? ucwords( strtolower($json['features'][0]['attributes']['MS_choice']) )
							: '';

						$updatedData[16] = ($json['features'][0]['attributes']['high_sch_distr'])
							? ucwords(strtolower($json['features'][0]['attributes']['high_sch_distr']))
							: 'N/A';
						$updatedData[17] = ( $json['features'][0]['attributes']['HS_choice'] )
							? ucwords( strtolower($json['features'][0]['attributes']['HS_choice']) )
							: '';
					}
		}
		$elem = [1, 2, 3, 4, 5];
		$mid = [6,7,8];
		$high = [9,10,11,12];
		$nextSchool = "";
		if (in_array($nextGrade, $elem))
		{
			$nextSchool = $updatedData[12];
		} else if (in_array($nextGrade, $mid)) {
			$nextSchool = $updatedData[14];
		} else if (in_array($nextGrade, $high)) {
			$nextSchool = $updatedData[16];
		}
		return $nextSchool;
	}
}
